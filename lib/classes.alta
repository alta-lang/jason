import String as AltaString from "string"
import Vector from "vector"
import Size from "types"

export class Jason {}

export class String extends Jason, AltaString {}

export class Array extends Jason, Vector<ptr Jason> {}

export class Object extends Jason {
  private var keys: Vector<AltaString> = new Vector<AltaString>
  private var values: Vector<ptr Jason> = new Vector<ptr Jason>

  public constructor() {
    super()
  }
  public constructor(keys: Vector<AltaString>, values: Vector<ptr Jason>) {
    super()
    this.keys = keys
    this.values = values
  }

  # Gets a reference to the value associated with the given key
  # @returns a reference to the value
  public function get(key: AltaString): ref ptr Jason {
    for i: Size in 0..this.keys.length {
      let other = this.keys.get(i)
      let j: Size = 0
      let ok = other.length == key.length
      while ok && j < key.length {
        if other.charAt(j) != key.charAt(j) {
          ok = false
        }
        ++j
      }
      if ok {
        return this.values.get(i)
      }
    }

    this.keys.push(key)
    return this.values.push()
  }

  # Checks whether a given key exists in this Map
  # @returns `true` if the key is present, `false` otherwise
  public function has(key: AltaString): bool {
    for i: Size in 0..this.keys.length {
      let other = this.keys.get(i)
      let j: Size = 0
      let ok = other.length == key.length
      while ok && j < key.length {
        if other.charAt(j) != key.charAt(j) {
          ok = false
        }
        ++j
      }
      if ok {
        return true
      }
    }

    return false
  }

  public function getKeys(): Vector<AltaString> {
    return this.keys
  }
}

export class Number extends Jason {
  public var value: double = 0

  public constructor() {
    super()
  }
  public constructor(value: double) {
    super()
    this.value = value
  }
}

export class Boolean extends Jason {
  public var value: bool = false

  public constructor() {
    super()
  }
  public constructor(value: bool) {
    super()
    this.value = value
  }
}

export class Null extends Jason {}
