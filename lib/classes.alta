import String as AltaString from "string"
import Vector from "vector"
import Size from "types"
import Map from "map"
import "./util.alta" as util
import floatingPointToString from "util"

export class Jason {
  public @virtual function toString(): AltaString {
    return new AltaString
  }
  public to AltaString {
    return this.toString()
  }
}

export class String extends Jason, AltaString {
  public @override function toString(): AltaString {
    return '"' + util.escapeString(super<AltaString>) + '"'
  }
  # note that for this class, the `to AltaString` operator
  # does nothing. Alta will first try to upcast to the desired
  # type, which in this case IS possible, causing the contents of
  # the string to be returned, rather than an escaped representation
  # of it. this is why the `toString` method is public (otherwise it
  # would just be protected)
  #
  # code that wants a proper, stringified JSON representation of all
  # Jason objects, regardless of whether they're Strings or anything else,
  # should use the `toString` method
}

export class Array extends Jason, Vector<ptr Jason> {
  public @override function toString(): AltaString {
    let result: AltaString = "["
    let isFirst = true
    for i: Size in 0..this.length {
      if isFirst {
        isFirst = false
      } else {
        result += ','
      }
      result += this[i].toString()
    }
    result += ']'
    return result
  }
}

export class Object extends Jason, Map<AltaString, ptr Jason> {
  public @override function toString(): AltaString {
    let result: AltaString = "{"
    let isFirst = true
    for i: Size in 0..this.keys.length {
      if isFirst {
        isFirst = false
      } else {
        result += ','
      }
      let key = this.keys[i]
      result += '"'
      result += util.escapeString(key)
      result += "\":"
      result += this[key].toString()
    }
    result += '}'
    return result
  }
}

export class Number extends Jason {
  public var value: double = 0

  public constructor() {
    super()
  }
  public @from constructor(value: double) {
    super()
    this.value = value
  }

  public to double {
    return this.value
  }

  public @override function toString(): AltaString {
    return floatingPointToString<double>(this.value)
  }
}

export class Boolean extends Jason {
  public var value: bool = false

  public constructor() {
    super()
  }
  public @from constructor(value: bool) {
    super()
    this.value = value
  }

  public to bool {
    return this.value
  }

  public @override function toString(): AltaString {
    if this.value {
      return "true"
    } else {
      return "false"
    }
  }
}

export class Null extends Jason {
  public @override function toString(): AltaString {
    return "null"
  }
}
